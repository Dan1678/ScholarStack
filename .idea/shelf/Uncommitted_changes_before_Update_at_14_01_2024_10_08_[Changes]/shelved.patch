Index: src/main/java/Managers/DatabaseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Managers;\r\n\r\nimport GroupContent.Comment;\r\n\r\nimport java.awt.*;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class DatabaseManager {\r\n\r\n    public static boolean createTable(String tableName, String col1, String col2) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                // Create a table with the specified name\r\n                String createTableQuery = String.format(\"CREATE TABLE IF NOT EXISTS %s (id SERIAL PRIMARY KEY, %s VARCHAR(255), %s VARCHAR(255))\", tableName, col1, col2);\r\n                executeQuery(conn, createTableQuery);\r\n\r\n                return true; // Table creation successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Table creation failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Table creation failed due to SQL exception\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public static boolean insertRecord(String tableName, String columns, String values) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n               // String colString = String.join(\", \", columns);\r\n               // String valString = String.join(\", \", values);\r\n\r\n                // Insert a record into the specified table\r\n                String insertQuery = String.format(\"INSERT INTO %s (%s) VALUES (%s)\", tableName, columns, values);\r\n                executeQuery(conn, insertQuery);\r\n\r\n                return true; // Insertion successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Insertion failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Insertion failed due to SQL exception\r\n        }\r\n    }\r\n\r\n    public static boolean insertComments(Integer parentID, String content, String userName, Timestamp time, Integer paperID) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n                // String colString = String.join(\", \", columns);\r\n                // String valString = String.join(\", \", values);\r\n\r\n                String parentIDValue = (parentID == null) ? \"NULL\" : parentID.toString();\r\n\r\n                String timeValue = (time == null) ? \"NULL\" : \"'\" + time.toString() + \"'\";\r\n\r\n\r\n                String insertQuery = String.format(\r\n                        \"INSERT INTO comments (parent_id, content, username, timestamp, \\\"paperID\\\") VALUES (%s, '%s', '%s', %s, %d)\",\r\n                        parentIDValue, content.replaceAll(\"'\", \"''\"), userName.replaceAll(\"'\", \"''\"), timeValue, paperID\r\n                );\r\n\r\n                executeQuery(conn, insertQuery);\r\n\r\n                return true; // Insertion successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Insertion failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Insertion failed due to SQL exception\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Deleting records\r\n    public static boolean deleteRecord(String tableName, int id) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                //Delete record from the table\r\n                String delQuery = String.format(\"DELETE FROM %s WHERE id = \" + id, tableName);\r\n                executeQuery(conn, delQuery);\r\n                return true;\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n                return false;\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Read record from a table id\r\n    //selectedoutput is desired column\r\n    public static String readRecord(String tableName, String selectedOutput, String knownCol, String knownInput) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \\\"\" + selectedOutput + \"\\\" FROM \" + tableName + \" WHERE \\\"\" + knownCol + \"\\\" = '\" + knownInput + \"'\";\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static String readRecord3(String tableName, String selectedOutput, String knownCol, String knownInput, int id) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                    //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \\\"\" + selectedOutput + \"\\\" FROM \" + tableName +\r\n                            \" WHERE \\\"\" + knownCol + \"\\\" = '\" + knownInput + \"'\" +\r\n                            \" AND id = \" + id;\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static String readRecord2(String tableName, String selectedOutput, String idType, int knownID) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                    //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \" + selectedOutput + \" FROM \" + tableName + \" WHERE \"+ idType +\"=\" + knownID;\r\n\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static int getLargestId(String tableName) {\r\n        int largestId = 0;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    String sql = \"SELECT MAX(id) FROM \" + tableName;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        largestId = rs.getInt(1);\r\n                    }\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return largestId;\r\n    }\r\n\r\n    public static Integer getPaperId(String tableName, String paperTitle) {\r\n        Integer id = null;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Sanitize paperTitle to prevent SQL injection\r\n                    // This is a basic example, you should implement a more robust method\r\n                    String sanitizedTitle = paperTitle.replace(\"'\", \"''\");\r\n\r\n                    String sql = \"SELECT id FROM \" + tableName + \" WHERE papertitle = '\" + sanitizedTitle + \"'\";\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        id = rs.getInt(\"id\");\r\n                    }\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    public static Integer getCommentId(String tableName, String commentTitle) {\r\n        Integer id = null;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Sanitize paperTitle to prevent SQL injection\r\n                    // This is a basic example, you should implement a more robust method\r\n                    String sanitizedTitle = commentTitle.replace(\"'\", \"''\");\r\n\r\n                    String sql = \"SELECT id FROM \" + tableName + \" WHERE content = '\" + sanitizedTitle + \"'\";\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        id = rs.getInt(\"id\");\r\n                    }\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    public static Integer getCommentParentID(String tableName, String commentTitle) {\r\n        Integer id = null;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Sanitize paperTitle to prevent SQL injection\r\n                    // This is a basic example, you should implement a more robust method\r\n                    String sanitizedTitle = commentTitle.replace(\"'\", \"''\");\r\n\r\n                    String sql = \"SELECT parent_id FROM \" + tableName + \" WHERE content = '\" + sanitizedTitle + \"'\";\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        id = rs.getInt(\"id\");\r\n                    }\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    public static void getAllPaperNamesFromDB(String tableName, int noRows) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Fixed the SQL query string\r\n                    String sql = \"SELECT * FROM \" + tableName + \" LIMIT \" + noRows;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    while (rs.next()) {\r\n                        ResultSetMetaData rsmd = rs.getMetaData();\r\n                        //int columnsNumber = rsmd.getColumnCount();\r\n                        System.out.println(\"tesing get all papers from db\"+rs.getString(3));\r\n\r\n                        System.out.println();\r\n                    }\r\n                    rs.close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    //not sure if need\r\n    public static void getAllUSerNamesFromDB(String tableName, int noRows) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Fixed the SQL query string\r\n                    String sql = \"SELECT * FROM \" + tableName + \" LIMIT \" + noRows;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    while (rs.next()) {\r\n                        ResultSetMetaData rsmd = rs.getMetaData();\r\n                        //int columnsNumber = rsmd.getColumnCount();\r\n                        System.out.println(\"tesing get all papers from db\"+rs.getString(2));\r\n\r\n                        System.out.println();\r\n                    }\r\n                    rs.close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static ArrayList<Comment> getCommentsForPaper(int paperId) {\r\n        ArrayList<Comment> comments = new ArrayList<>();\r\n\r\n        String sql = \"SELECT id, content, username FROM comments WHERE \\\"paperID\\\" = \" + paperId;\r\n\r\n\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rset = stmt.executeQuery(sql)) {\r\n\r\n            while (rset.next()) {\r\n                Integer id = rset.getInt(\"id\");\r\n                String content = rset.getString(\"content\");\r\n                String username = rset.getString(\"username\");\r\n\r\n\r\n                Comment comment = new Comment(content, id, username);\r\n                comments.add(comment);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return comments;\r\n    }\r\n\r\n    public static ArrayList<Comment> getSubComments(int parentID) {\r\n        ArrayList<Comment> Subcomments = new ArrayList<>();\r\n\r\n        String sql = \"SELECT id, content, username FROM comments WHERE parent_ID =\" + parentID;\r\n\r\n\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rset = stmt.executeQuery(sql)) {\r\n\r\n            while (rset.next()) {\r\n                Integer id = rset.getInt(\"id\");\r\n                String content = rset.getString(\"content\");\r\n                String username = rset.getString(\"username\");\r\n\r\n\r\n                Comment comment = new Comment(content, id, username);\r\n                Subcomments.add(comment);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Subcomments;\r\n    }\r\n\r\n\r\n\r\n    private static void executeQuery (Connection conn, String query){\r\n            try (PreparedStatement statement = conn.prepareStatement(query)) {\r\n                statement.executeUpdate();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Managers/DatabaseManager.java b/src/main/java/Managers/DatabaseManager.java
--- a/src/main/java/Managers/DatabaseManager.java	(revision c45168edc9d9df42e1b70741de10746c3cdef9d3)
+++ b/src/main/java/Managers/DatabaseManager.java	(date 1705182171491)
@@ -314,7 +314,7 @@
                     ResultSet rs = stmt.executeQuery(sql);
 
                     if (rs.next()) {
-                        id = rs.getInt("id");
+                        id = rs.getInt("parent_id");
                     }
                 }
             } else {
