Index: src/main/java/GroupContent/HierarchicalContent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GroupContent;\r\n\r\nimport MainUI.WrappedTreeRndr;\r\nimport Managers.DatabaseManager;\r\nimport MainUI.RightPanel;\r\nimport MainUI.CommentsDisplay;\r\nimport jdk.javadoc.internal.doclets.formats.html.markup.Head;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.tree.DefaultMutableTreeNode;\r\nimport javax.swing.tree.TreePath;\r\nimport java.awt.*;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\nimport java.sql.Timestamp;\r\nimport java.util.ArrayList;\r\n\r\npublic class HierarchicalContent {\r\n\r\n    private String content, UserName;\r\n    private ArrayList<HierarchicalContent> subContent;\r\n    private JTree tree;\r\n    private Integer ID;\r\n\r\n    public HierarchicalContent(String content, Integer ID, String UserName) {\r\n        this.content = content;\r\n        this.ID = ID;\r\n        this.UserName = UserName;\r\n        subContent = new ArrayList<>();\r\n    }\r\n\r\n    public JTree getDisplayTree() {\r\n        // returns the JTree representing the hierarchical content below the current tag\r\n\r\n        DefaultMutableTreeNode root = findTreeBelow(this);\r\n\r\n        tree = new JTree(root);\r\n        //tree.setCellRenderer(new WrappedTreeRndr());\r\n\r\n        // Add MouseListener to JTree\r\n        tree.addMouseListener(new MouseAdapter() {\r\n            @Override\r\n            public void mouseClicked(MouseEvent e) {\r\n                if (e.getClickCount() == 3) {\r\n                    // on triple click\r\n\r\n                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();  //get selected node\r\n                    if (selectedNode != null) { //ensure it isn't empty\r\n                        tree.expandPath(new TreePath(selectedNode.getPath())); //ensure the node is expanded (so it is visible)\r\n\r\n                        Object nodeInfo = selectedNode.getUserObject();\r\n                        if (nodeInfo instanceof HierarchicalContent) { //the tree elements should be of type HierarchicalContent\r\n                            HierarchicalContent selectedContent = (HierarchicalContent) nodeInfo; //cast to HierarchicalContent object\r\n                            String commentText = JOptionPane.showInputDialog(\"Enter the content\");\r\n                            if (commentText != null) {\r\n                                selectedContent.addSubContent(new HierarchicalContent(commentText, selectedContent.getID(), UserName));\r\n\r\n                                int paper = DatabaseManager.getPaperId(\"papers4\", String.format(CommentsDisplay.getPaper().getName()));\r\n                                System.out.println(paper);\r\n                                System.out.println(selectedContent.getContent());\r\n\r\n\r\n\r\n                                //DatabaseManager.insertComments(parentID, String.format(commentText), RightPanel.getLoggedInUser(), new Timestamp(System.currentTimeMillis()), paper);\r\n                                if (selectedContent.getContent() == \"Triple click here to add comment\"){\r\n\r\n                                    DatabaseManager.insertComments(null, String.format(commentText), RightPanel.getLoggedInUser(), new Timestamp(System.currentTimeMillis()), paper);\r\n                                }\r\n\r\n                                if (selectedContent.getContent() != \"Triple click here to add comment\"){\r\n                                    int parentID = DatabaseManager.getCommentId(\"comments\", String.format(selectedContent.getContent()));\r\n                                    DatabaseManager.insertComments(parentID, String.format(commentText), RightPanel.getLoggedInUser(), new Timestamp(System.currentTimeMillis()), paper);\r\n                                }\r\n\r\n                               // DatabaseManager.insertComments(parentID, String.format(commentText), RightPanel.getLoggedInUser(), new Timestamp(System.currentTimeMillis()), paper);\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return tree;\r\n\r\n    }\r\n\r\n    private DefaultMutableTreeNode findTreeBelow(HierarchicalContent parentContent) {\r\n        //Gets the tree of all nodes underneath parent tag\r\n\r\n        //base case\r\n        if (parentContent.getSubContent() == null) {\r\n            return null;\r\n        }\r\n\r\n        DefaultMutableTreeNode parent = new DefaultMutableTreeNode(parentContent);\r\n\r\n        //recursive case\r\n        for (HierarchicalContent c : parentContent.getSubContent()) {\r\n            DefaultMutableTreeNode treeBelow = findTreeBelow(c);\r\n            parent.add(treeBelow);\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    public String getContent() {\r\n        return content;\r\n    }\r\n\r\n    public void setContent(String content) {\r\n        this.content = content;\r\n    }\r\n\r\n    public void addSubContent(HierarchicalContent content) {\r\n        subContent.add(content);\r\n    }\r\n\r\n    public ArrayList<HierarchicalContent> getSubContent() {\r\n        return subContent;\r\n    }\r\n\r\n    public Integer getID() {\r\n        return ID;\r\n    }\r\n\r\n    public void setID(Integer ID) {\r\n        this.ID = ID;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return content;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/GroupContent/HierarchicalContent.java b/src/main/java/GroupContent/HierarchicalContent.java
--- a/src/main/java/GroupContent/HierarchicalContent.java	(revision 396a9520b79412736768bffb65712c9d9f53fa38)
+++ b/src/main/java/GroupContent/HierarchicalContent.java	(date 1705162622562)
@@ -32,8 +32,11 @@
     public JTree getDisplayTree() {
         // returns the JTree representing the hierarchical content below the current tag
 
+
+
         DefaultMutableTreeNode root = findTreeBelow(this);
 
+
         tree = new JTree(root);
         //tree.setCellRenderer(new WrappedTreeRndr());
 
@@ -89,7 +92,7 @@
     private DefaultMutableTreeNode findTreeBelow(HierarchicalContent parentContent) {
         //Gets the tree of all nodes underneath parent tag
 
-        //base case
+        //base case   - use instead databasemanager.getcommentparentid to check if parent id exists
         if (parentContent.getSubContent() == null) {
             return null;
         }
@@ -133,3 +136,17 @@
         return content;
     }
 }
+
+
+/*int i =0;
+        for (i = 0; i < comments.size(); i++){
+            int parentID = DatabaseManager.getCommentParentID("comments", String.valueOf(comments.get(i)));
+            if (parentID == Integer.parseInt(null)) {
+                commentsPanel.add(comments.get(0).getDisplayTree(), BorderLayout.CENTER);    //make new tree for that comment
+            }
+
+            //commentsPanel.add(comments.get(0).getDisplayTree(), BorderLayout.CENTER);
+
+            commentsPanel.add(comments.get(1).getDisplayTree(), BorderLayout.CENTER);
+            //commentsPanel.add(comments.get(i).getDisplayTree(), BorderLayout.CENTER);
+        }*/
\ No newline at end of file
Index: src/main/java/Managers/DatabaseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Managers;\r\n\r\nimport GroupContent.Comment;\r\n\r\nimport java.awt.*;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class DatabaseManager {\r\n\r\n    public static boolean createTable(String tableName, String col1, String col2) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                // Create a table with the specified name\r\n                String createTableQuery = String.format(\"CREATE TABLE IF NOT EXISTS %s (id SERIAL PRIMARY KEY, %s VARCHAR(255), %s VARCHAR(255))\", tableName, col1, col2);\r\n                executeQuery(conn, createTableQuery);\r\n\r\n                return true; // Table creation successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Table creation failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Table creation failed due to SQL exception\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public static boolean insertRecord(String tableName, String columns, String values) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n               // String colString = String.join(\", \", columns);\r\n               // String valString = String.join(\", \", values);\r\n\r\n                // Insert a record into the specified table\r\n                String insertQuery = String.format(\"INSERT INTO %s (%s) VALUES (%s)\", tableName, columns, values);\r\n                executeQuery(conn, insertQuery);\r\n\r\n                return true; // Insertion successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Insertion failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Insertion failed due to SQL exception\r\n        }\r\n    }\r\n\r\n    public static boolean insertComments(Integer parentID, String content, String userName, Timestamp time, Integer paperID) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n                // String colString = String.join(\", \", columns);\r\n                // String valString = String.join(\", \", values);\r\n\r\n                String parentIDValue = (parentID == null) ? \"NULL\" : parentID.toString();\r\n\r\n                String timeValue = (time == null) ? \"NULL\" : \"'\" + time.toString() + \"'\";\r\n\r\n\r\n                String insertQuery = String.format(\r\n                        \"INSERT INTO comments (parent_id, content, username, timestamp, \\\"paperID\\\") VALUES (%s, '%s', '%s', %s, %d)\",\r\n                        parentIDValue, content.replaceAll(\"'\", \"''\"), userName.replaceAll(\"'\", \"''\"), timeValue, paperID\r\n                );\r\n\r\n                executeQuery(conn, insertQuery);\r\n\r\n                return true; // Insertion successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Insertion failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Insertion failed due to SQL exception\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Deleting records\r\n    public static boolean deleteRecord(String tableName, int id) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                //Delete record from the table\r\n                String delQuery = String.format(\"DELETE FROM %s WHERE id = \" + id, tableName);\r\n                executeQuery(conn, delQuery);\r\n                return true;\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n                return false;\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Read record from a table id\r\n    //selectedoutput is desired column\r\n    public static String readRecord(String tableName, String selectedOutput, String knownCol, String knownInput) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \\\"\" + selectedOutput + \"\\\" FROM \" + tableName + \" WHERE \\\"\" + knownCol + \"\\\" = '\" + knownInput + \"'\";\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static String readRecord3(String tableName, String selectedOutput, String knownCol, String knownInput, int id) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                    //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \\\"\" + selectedOutput + \"\\\" FROM \" + tableName +\r\n                            \" WHERE \\\"\" + knownCol + \"\\\" = '\" + knownInput + \"'\" +\r\n                            \" AND id = \" + id;\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static String readRecord2(String tableName, String selectedOutput, String idType, int knownID) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                    //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \" + selectedOutput + \" FROM \" + tableName + \" WHERE \"+ idType +\"=\" + knownID;\r\n\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static int getLargestId(String tableName) {\r\n        int largestId = 0;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    String sql = \"SELECT MAX(id) FROM \" + tableName;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        largestId = rs.getInt(1);\r\n                    }\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return largestId;\r\n    }\r\n\r\n    public static Integer getPaperId(String tableName, String paperTitle) {\r\n        Integer id = null;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Sanitize paperTitle to prevent SQL injection\r\n                    // This is a basic example, you should implement a more robust method\r\n                    String sanitizedTitle = paperTitle.replace(\"'\", \"''\");\r\n\r\n                    String sql = \"SELECT id FROM \" + tableName + \" WHERE papertitle = '\" + sanitizedTitle + \"'\";\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        id = rs.getInt(\"id\");\r\n                    }\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    public static Integer getCommentId(String tableName, String commentTitle) {\r\n        Integer id = null;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Sanitize paperTitle to prevent SQL injection\r\n                    // This is a basic example, you should implement a more robust method\r\n                    String sanitizedTitle = commentTitle.replace(\"'\", \"''\");\r\n\r\n                    String sql = \"SELECT id FROM \" + tableName + \" WHERE content = '\" + sanitizedTitle + \"'\";\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        id = rs.getInt(\"id\");\r\n                    }\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n\r\n    public static void getAllPaperNamesFromDB(String tableName, int noRows) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Fixed the SQL query string\r\n                    String sql = \"SELECT * FROM \" + tableName + \" LIMIT \" + noRows;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    while (rs.next()) {\r\n                        ResultSetMetaData rsmd = rs.getMetaData();\r\n                        //int columnsNumber = rsmd.getColumnCount();\r\n                        System.out.println(\"tesing get all papers from db\"+rs.getString(3));\r\n\r\n                        System.out.println();\r\n                    }\r\n                    rs.close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    //not sure if need\r\n    public static void getAllUSerNamesFromDB(String tableName, int noRows) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Fixed the SQL query string\r\n                    String sql = \"SELECT * FROM \" + tableName + \" LIMIT \" + noRows;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    while (rs.next()) {\r\n                        ResultSetMetaData rsmd = rs.getMetaData();\r\n                        //int columnsNumber = rsmd.getColumnCount();\r\n                        System.out.println(\"tesing get all papers from db\"+rs.getString(2));\r\n\r\n                        System.out.println();\r\n                    }\r\n                    rs.close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static ArrayList<Comment> getCommentsForPaper(int paperId) {\r\n        ArrayList<Comment> comments = new ArrayList<>();\r\n\r\n        String sql = \"SELECT id, content, username FROM comments WHERE \\\"paperID\\\" = \" + paperId;\r\n\r\n\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rset = stmt.executeQuery(sql)) {\r\n\r\n            while (rset.next()) {\r\n                Integer id = rset.getInt(\"id\");\r\n                String content = rset.getString(\"content\");\r\n                String username = rset.getString(\"username\");\r\n\r\n\r\n                Comment comment = new Comment(content, id, username);\r\n                comments.add(comment);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return comments;\r\n    }\r\n\r\n\r\n\r\n    private static void executeQuery (Connection conn, String query){\r\n            try (PreparedStatement statement = conn.prepareStatement(query)) {\r\n                statement.executeUpdate();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Managers/DatabaseManager.java b/src/main/java/Managers/DatabaseManager.java
--- a/src/main/java/Managers/DatabaseManager.java	(revision 396a9520b79412736768bffb65712c9d9f53fa38)
+++ b/src/main/java/Managers/DatabaseManager.java	(date 1705161446064)
@@ -300,6 +300,32 @@
         return id;
     }
 
+    public static Integer getCommentParentID(String tableName, String commentTitle) {
+        Integer id = null;
+
+        try (Connection conn = DatabaseConnector.connectToDatabase()) {
+            if (conn != null) {
+                try (Statement stmt = conn.createStatement()) {
+                    // Sanitize paperTitle to prevent SQL injection
+                    // This is a basic example, you should implement a more robust method
+                    String sanitizedTitle = commentTitle.replace("'", "''");
+
+                    String sql = "SELECT parent_id FROM " + tableName + " WHERE content = '" + sanitizedTitle + "'";
+                    ResultSet rs = stmt.executeQuery(sql);
+
+                    if (rs.next()) {
+                        id = rs.getInt("id");
+                    }
+                }
+            } else {
+                System.out.println("Connection to database failed");
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return id;
+    }
 
     public static void getAllPaperNamesFromDB(String tableName, int noRows) {
         try (Connection conn = DatabaseConnector.connectToDatabase()) {
Index: src/main/java/GroupContent/Comment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GroupContent;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class Comment extends HierarchicalContent{\r\n\r\n\r\n    public Comment(String content, Integer ID, String UserName) {\r\n        super(content, ID, UserName);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/GroupContent/Comment.java b/src/main/java/GroupContent/Comment.java
--- a/src/main/java/GroupContent/Comment.java	(revision 396a9520b79412736768bffb65712c9d9f53fa38)
+++ b/src/main/java/GroupContent/Comment.java	(date 1705163199280)
@@ -1,6 +1,7 @@
 package GroupContent;
 
 import javax.swing.*;
+import java.util.ArrayList;
 
 public class Comment extends HierarchicalContent{
 
@@ -9,4 +10,6 @@
         super(content, ID, UserName);
     }
 
+
+
 }
Index: src/main/java/MainUI/CommentsDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package MainUI;\r\n\r\nimport GroupContent.Comment;\r\nimport GroupContent.HierarchicalContent;\r\nimport GroupContent.Paper;\r\nimport Managers.DatabaseManager;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.tree.DefaultTreeCellRenderer;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\n// Define a custom panel for comments\r\n//class CommentPanel extends JPanel {\r\n//    //panel which holds one comment\r\n//    CommentPanel(String commentContent) {\r\n//        setLayout(new BorderLayout());\r\n//        setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5)); // Add padding\r\n//\r\n//        JLabel commentLabel = new JLabel(\"<html><body width='300'>\" + commentContent + \"</body></html>\");\r\n//        commentLabel.setVerticalAlignment(SwingConstants.TOP);\r\n//        add(commentLabel, BorderLayout.WEST);\r\n//\r\n//        JButton replyBtn = new JButton(\"Reply\");\r\n//        add(replyBtn, BorderLayout.EAST);\r\n//        //Do the thing we did for show comments with the interface\r\n//    }\r\n//}\r\n\r\npublic class CommentsDisplay extends JScrollPane {\r\n    //scroll pane which holds multiple comment panels\r\n    private JPanel commentsPanel; // Panel to hold comment components\r\n    public static Paper paper;\r\n\r\n\r\n    public CommentsDisplay() {\r\n        commentsPanel = new JPanel();\r\n        commentsPanel.setLayout(new BorderLayout());\r\n\r\n\r\n        setViewportView(commentsPanel);\r\n        setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n    }\r\n\r\n    public void displayComments(Paper paper) {\r\n        String paperName = paper.getName();\r\n        CommentsDisplay.paper = paper;\r\n        commentsPanel.removeAll();\r\n\r\n        ArrayList<Comment> comments = paper.getComments();\r\n\r\n\r\n\r\n\r\n        //commentsPanel.add(DatabaseManager.readRecord2(\"comments\", \"content\", \"paperID\", paperID));\r\n        commentsPanel.add(comments.get(0).getDisplayTree(), BorderLayout.CENTER);\r\n\r\n        JLabel titleLabel = new JLabel(paper.getName());\r\n        titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD, 15));\r\n        commentsPanel.add(titleLabel, BorderLayout.NORTH);\r\n\r\n        JLabel infoLabel = new JLabel(\"Triple click on a comment to add a reply\");\r\n        infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD));\r\n        commentsPanel.add(infoLabel, BorderLayout.SOUTH);\r\n\r\n//        ArrayList<Comment> comments = paper.getComments();\r\n//\r\n//        if (comments.isEmpty()) {\r\n//            JLabel noCommentsLabel = new JLabel(\"No comments available\");\r\n//            noCommentsLabel.setForeground(Color.GRAY);\r\n//            noCommentsLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n//            commentsPanel.add(noCommentsLabel);\r\n//        } else {\r\n//            for (Comment c : comments) {\r\n//                CommentPanel commentPanel = new CommentPanel(c.getContent());\r\n//                commentsPanel.add(commentPanel);\r\n//            }\r\n//        }\r\n\r\n        revalidate();\r\n        repaint();\r\n    }\r\n\r\n    public static Paper getPaper(){\r\n        return paper;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/MainUI/CommentsDisplay.java b/src/main/java/MainUI/CommentsDisplay.java
--- a/src/main/java/MainUI/CommentsDisplay.java	(revision 396a9520b79412736768bffb65712c9d9f53fa38)
+++ b/src/main/java/MainUI/CommentsDisplay.java	(date 1705162225595)
@@ -52,9 +52,10 @@
 
 
 
-
-        //commentsPanel.add(DatabaseManager.readRecord2("comments", "content", "paperID", paperID));
         commentsPanel.add(comments.get(0).getDisplayTree(), BorderLayout.CENTER);
+        //commentsPanel.add(DatabaseManager.readRecord2("comments", "content", "paperID", paperID));
+
+
 
         JLabel titleLabel = new JLabel(paper.getName());
         titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD, 15));
Index: src/main/java/GroupContent/Paper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GroupContent;\r\n\r\nimport Managers.DatabaseManager;\r\nimport GroupContent.Comment;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class Paper {\r\n\r\n    private String name, n;\r\n    private ArrayList<Comment> comments;\r\n    private ArrayList<Tag> tags;\r\n    public static ArrayList<Paper> allPapers = new ArrayList<>(); //is public ok for this attribute, I believe paper instances can't be modified from an arraylist?\r\n\r\n    public Paper(String paperTitle) {\r\n        this.name = paperTitle;\r\n        comments = new ArrayList<>();\r\n        tags = new ArrayList<>();\r\n\r\n        System.out.println(\"this.name test:  \"+this.name);\r\n\r\n        addComment(new Comment(\"Triple click here to add comment\", null, null));\r\n\r\n        PaperComments(this);\r\n\r\n        //find content of commetns where paperID = this paperID and parent id = null\r\n        //find content of comments with parent ID =! null display underneath\r\n\r\n\r\n        //int paperID;\r\n        //paperID = DatabaseManager.getPaperId(\"papers4\", this.getName());\r\n\r\n        String commentsNew = DatabaseManager.readRecord2(\"comments\",\"content\", \"paperID\", 2);\r\n        System.out.println(commentsNew);\r\n\r\n        addComment(new Comment(commentsNew, null, \"testing display comments\"));\r\n        System.out.println(this.getUser(this.getName()));\r\n\r\n        allPapers.add(this);\r\n    }\r\n\r\n\r\n    public void PaperComments(Paper p){\r\n        String name = p.getName();\r\n        System.out.println(\"TEST\");\r\n\r\n        if (name == null) {\r\n            System.out.println(\"Paper name is null, no comments\");\r\n            return;\r\n        }\r\n\r\n\r\n        //get this papers id to use for the comments\r\n        int paperId = DatabaseManager.getPaperId(\"papers4\", name);\r\n\r\n        //if doesnt exist\r\n        if (paperId == -1) {\r\n            System.out.println(\"Paper ID not found for name: \" + name);\r\n            return;\r\n        }\r\n\r\n        // get all the comments\r\n        ArrayList<Comment> comments = DatabaseManager.getCommentsForPaper(paperId);\r\n\r\n\r\n        // add comments to paper\r\n        for (Comment comment : comments) {\r\n            p.addComment(comment);\r\n            System.out.println(\"Comment content: \" + comment.getContent());\r\n        }\r\n\r\n    }\r\n\r\n    /*public void PaperComments(Paper p){\r\n        String name = p.getName();\r\n        System.out.println(\"TEST\");\r\n\r\n        for (int b = 0; b<= DatabaseManager.getLargestId(\"comments\"); b++){     //go through all comments in table\r\n\r\n            //System.out.println(\"This.getName test: \"+ name);\r\n            if(name == null){\r\n                break;\r\n            }\r\n\r\n            if (name!= null) {\r\n                String paperID = String.valueOf((DatabaseManager.getPaperId(\"papers4\", name)));\r\n\r\n                //check if for multiple comments on same paper\r\n                //\r\n                //gets comment from the paper\r\n                //String paperTitle = (DatabaseManager.readRecord2(\"papers4\", \"papertitle\", \"id\", i));\r\n\r\n\r\n                String CommentContent = DatabaseManager.readRecord3(\"comments\", \"content\", \"paperID\", paperID, b);\r\n                if (CommentContent == null){\r\n                    continue;\r\n                }\r\n                System.out.println(\"Paper from comments name: \"+this.name);\r\n                System.out.println(\"Comment content: \"+CommentContent);\r\n\r\n                p.addComment(new Comment(CommentContent, null, \"testing user\"));\r\n            }\r\n        }\r\n\r\n\r\n    } */\r\n\r\n    public void addComment(Comment comment) {\r\n\r\n        comments.add(comment);\r\n    }\r\n\r\n    public ArrayList<Comment> getComments() {\r\n        return comments;\r\n    }\r\n\r\n    public void addTags(Tag tag) {\r\n        tags.add(tag);\r\n    }\r\n\r\n    public ArrayList<Tag> getTags() {\r\n        return tags;\r\n    }\r\n\r\n    public ArrayList<String> getTagsStringList() {\r\n        ArrayList<String> tagsStringList = new ArrayList<>();;\r\n        for(Tag tag:tags) {\r\n            String tagName = tag.toString();\r\n            tagsStringList.add(tagName);\r\n        }\r\n        return tagsStringList;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getUser(String n){\r\n        this.n = name;\r\n        String UserUpload = Managers.DatabaseManager.readRecord(\"papers4\", \"username\", \"papertitle\", this.n);\r\n        return UserUpload;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/GroupContent/Paper.java b/src/main/java/GroupContent/Paper.java
--- a/src/main/java/GroupContent/Paper.java	(revision 396a9520b79412736768bffb65712c9d9f53fa38)
+++ b/src/main/java/GroupContent/Paper.java	(date 1705163170744)
@@ -70,7 +70,7 @@
             p.addComment(comment);
             System.out.println("Comment content: " + comment.getContent());
         }
-
+        return;
     }
 
     /*public void PaperComments(Paper p){
