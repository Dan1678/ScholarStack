Index: src/main/java/MainUI/CommentsDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package MainUI;\r\n\r\nimport GroupContent.Comment;\r\nimport GroupContent.HierarchicalContent;\r\nimport GroupContent.Paper;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.tree.DefaultTreeCellRenderer;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\n// Define a custom panel for comments\r\n//class CommentPanel extends JPanel {\r\n//    //panel which holds one comment\r\n//    CommentPanel(String commentContent) {\r\n//        setLayout(new BorderLayout());\r\n//        setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5)); // Add padding\r\n//\r\n//        JLabel commentLabel = new JLabel(\"<html><body width='300'>\" + commentContent + \"</body></html>\");\r\n//        commentLabel.setVerticalAlignment(SwingConstants.TOP);\r\n//        add(commentLabel, BorderLayout.WEST);\r\n//\r\n//        JButton replyBtn = new JButton(\"Reply\");\r\n//        add(replyBtn, BorderLayout.EAST);\r\n//        //Do the thing we did for show comments with the interface\r\n//    }\r\n//}\r\n\r\npublic class CommentsDisplay extends JScrollPane {\r\n    //scroll pane which holds multiple comment panels\r\n    private JPanel commentsPanel; // Panel to hold comment components\r\n\r\n    public CommentsDisplay() {\r\n        commentsPanel = new JPanel();\r\n        commentsPanel.setLayout(new BorderLayout());\r\n\r\n        setViewportView(commentsPanel);\r\n        setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n    }\r\n\r\n    public void displayComments(Paper paper) {\r\n        //commentsPanel.removeAll();\r\n\r\n        ArrayList<Comment> comments = paper.getComments();\r\n        JTree tree = comments.get(0).getDisplayTree();\r\n        commentsPanel.add(comments.get(0).getDisplayTree(), BorderLayout.CENTER);\r\n\r\n        JLabel titleLabel = new JLabel(paper.getName());\r\n        titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD, 15));\r\n        commentsPanel.add(titleLabel, BorderLayout.NORTH);\r\n\r\n        JLabel infoLabel = new JLabel(\"Triple click on a comment to add a reply\");\r\n        infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD));\r\n        commentsPanel.add(infoLabel, BorderLayout.SOUTH);\r\n\r\n//        ArrayList<Comment> comments = paper.getComments();\r\n//\r\n//        if (comments.isEmpty()) {\r\n//            JLabel noCommentsLabel = new JLabel(\"No comments available\");\r\n//            noCommentsLabel.setForeground(Color.GRAY);\r\n//            noCommentsLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n//            commentsPanel.add(noCommentsLabel);\r\n//        } else {\r\n//            for (Comment c : comments) {\r\n//                CommentPanel commentPanel = new CommentPanel(c.getContent());\r\n//                commentsPanel.add(commentPanel);\r\n//            }\r\n//        }\r\n\r\n        revalidate();\r\n        repaint();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/MainUI/CommentsDisplay.java b/src/main/java/MainUI/CommentsDisplay.java
--- a/src/main/java/MainUI/CommentsDisplay.java	(revision 955116430f7b5c9371d1690c1512c5f71c495d2b)
+++ b/src/main/java/MainUI/CommentsDisplay.java	(date 1704201597563)
@@ -40,7 +40,7 @@
     }
 
     public void displayComments(Paper paper) {
-        //commentsPanel.removeAll();
+        commentsPanel.removeAll();
 
         ArrayList<Comment> comments = paper.getComments();
         JTree tree = comments.get(0).getDisplayTree();
Index: src/main/java/GroupContent/Paper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GroupContent;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\n\r\npublic class Paper {\r\n\r\n    private String name, n;\r\n    private ArrayList<Comment> comments;\r\n    private ArrayList<Tag> tags;\r\n    public static ArrayList<Paper> allPapers = new ArrayList<>(); //is public ok for this attribute, I believe paper instances can't be modified from an arraylist?\r\n\r\n    public Paper() {\r\n        comments = new ArrayList<>();\r\n        tags = new ArrayList<>();\r\n\r\n        addComment(new Comment(\"Triple click here to add comment\"));\r\n        allPapers.add(this);\r\n    }\r\n\r\n    public void addComment(Comment comment) {\r\n        comments.add(comment);\r\n    }\r\n\r\n    public ArrayList<Comment> getComments() {\r\n        return comments;\r\n    }\r\n\r\n    public void addTags(Tag tag) {\r\n        tags.add(tag);\r\n    }\r\n\r\n    public ArrayList<Tag> getTags() {\r\n        return tags;\r\n    }\r\n\r\n    public ArrayList<String> getTagsStringList() {\r\n        ArrayList<String> tagsStringList = new ArrayList<>();;\r\n        for(Tag tag:tags) {\r\n            String tagName = tag.toString();\r\n            tagsStringList.add(tagName);\r\n        }\r\n        return tagsStringList;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getUser(String n){\r\n        this.n = name;\r\n        String UserUpload = Managers.DatabaseManager.readRecord(\"papers4\", \"username\", \"papertitle\", this.n);\r\n        return UserUpload;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/GroupContent/Paper.java b/src/main/java/GroupContent/Paper.java
--- a/src/main/java/GroupContent/Paper.java	(revision 955116430f7b5c9371d1690c1512c5f71c495d2b)
+++ b/src/main/java/GroupContent/Paper.java	(date 1704200103814)
@@ -1,5 +1,10 @@
 package GroupContent;
 
+import Managers.DatabaseManager;
+import Managers.PasswordHashing;
+
+import java.security.Timestamp;
+import java.time.LocalDate;
 import java.util.ArrayList;
 
 
@@ -20,7 +25,10 @@
     }
 
     public void addComment(Comment comment) {
+        LocalDate currentDate = LocalDate.now();
+        DatabaseManager.insertRecord("comments", "paper, user, comment, time", String.format("'%s', '%s'", this, this.name, comment, currentDate));
         comments.add(comment);
+
     }
 
     public ArrayList<Comment> getComments() {
Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Managers.DatabaseManager;\r\nimport Managers.CreateLoginForm;\r\nimport Managers.LoginManager;\r\nimport Managers.BackupManager;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class Main {\r\n    public static void main(String arg[]) {\r\n\r\n        try {\r\n            //create instance of the CreateLoginForm\r\n            CreateLoginForm form = new CreateLoginForm();\r\n            form.setSize(1000, 1000);  //set size of the frame\r\n            form.setVisible(true);  //make form visible to the user\r\n        } catch (Exception e) {\r\n            //handle exception\r\n            JOptionPane.showMessageDialog(null, e.getMessage());\r\n        }\r\n\r\n//        BackupManager backupManager = new BackupManager(\r\n//                \"ec2-54-246-1-94.eu-west-1.compute.amazonaws.com\",\r\n//                \"d6rkhhv2aujh36\",\r\n//                \"mixbutdugvnycu\",\r\n//                \"03f7fa8bfe5bfc30d6776369a8163f90164d68fcebaeecc32f073d7c4a334b94\");\r\n//\r\n//        String backupFilePath = \"C:\\\\SS_Backup\\\\heroku_backup2.backup\";\r\n//\r\n//        // Create the backup\r\n//        backupManager.createBackup(backupFilePath);\r\n\r\n    /*    String testPass = \"123456\";\r\n        String testPass2 = \"test5%%\";\r\n        String hashed = PasswordHashing.hashPassword(testPass);\r\n        String hashed1 = PasswordHashing.hashPassword(testPass);\r\n        String hashed2 = PasswordHashing.hashPassword(testPass2);\r\n\r\n        System.out.println(\"input password: \"+testPass);\r\n        System.out.println(\"Hashed password: \"+ hashed);\r\n        System.out.println(\"Hashed password: \"+ hashed1);\r\n        System.out.println(\"input password2: \"+testPass2);\r\n        System.out.println(\"Hashed password: \"+ hashed2);\r\n     */\r\n\r\n//        String tableName = \"papers4\";\r\n//        int rowDeleted = 1;\r\n//        boolean wasDeleted = DatabaseManager.deleteRecord(tableName, rowDeleted);\r\n\r\n//\r\n//\r\n//            boolean wasDeleted = DatabaseManager.deleteRecord(tableName, a);\r\n//            if(wasDeleted){\r\n//                System.out.println(\"Record for ID:\" + rowDeleted+ \"was deleted\");\r\n//            }\r\n//            else{\r\n//                System.out.println(\"Record for ID:\"+rowDeleted+\"was not deleted\");\r\n//            }\r\n//        }\r\n\r\n        //\r\n\r\n\r\n\r\n\r\n//        String tableName = \"papers3\";\r\n//        int idToRead = 1;\r\n//        String selOut = \"username\";\r\n//        String outputCol = DatabaseManager.readRecord(\"papers3\", \"username\", \"paper title\", \"test, test, 4444.\");\r\n//\r\n//        System.out.println(\"RequiredOutput: \"+outputCol);\r\n\r\n //\r\n       // SELECT \"username\" FROM papers3 WHERE \"paper title\" = 'testing, testing, 4444.';\r\n //       String sql = \"SELECT \" + selectedOutput + \" FROM \" + tableName + \" WHERE \" + knownCol + \" = '\" + knownInput + \"'\";\r\n       // readRecord(String tableName, String selectedOutput, String knownCol, String knownInput)\r\n//        SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n//        \"SELECT %s FROM %s WHERE \"+knownCol+\" =\"+knownInput, selectedOutput, tableName\r\n\r\n       // boolean tableCreationResult = DatabaseManager.createTable(tableName);\r\n        //boolean insertionResult = DatabaseManager.insertRecord(tableName, \"username, password\", \"'john_does', 'password1234'\");\r\n\r\n\r\n\r\n//        String tableName = \"papers4\";\r\n//        String col1 = \"username\";\r\n//        String col2 = \"paperTitle\";\r\n//\r\n//        // Create the specified table\r\n//        boolean tableCreationResult = DatabaseManager.createTable(tableName, col1, col2);\r\n//\r\n//        if (tableCreationResult) {\r\n//            System.out.println(\"Table '\" + tableName + \"' created successfully!\");\r\n//        } else {\r\n//            System.out.println(\"Failed to create table '\" + tableName + \"'.\");\r\n//        }\r\n//\r\n//        // Create the specified table\r\n//        if (tableCreationResult) {\r\n//            System.out.println(\"Table '\" + tableName + \"' created successfully!\");\r\n//\r\n//            // Insert a record into the \"users\" table\r\n//            boolean insertionResult = DatabaseManager.insertRecord(tableName, \"username, password\", \"'john_doe', 'password123'\");\r\n//\r\n//            if (insertionResult) {\r\n//                System.out.println(\"Record inserted successfully!\");\r\n//            } else {\r\n//                System.out.println(\"Failed to insert record.\");\r\n//            }\r\n//        } else {\r\n//            System.out.println(\"Failed to create table '\" + tableName + \"'.\");\r\n//        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision 955116430f7b5c9371d1690c1512c5f71c495d2b)
+++ b/src/main/java/Main.java	(date 1704200920364)
@@ -18,6 +18,20 @@
             JOptionPane.showMessageDialog(null, e.getMessage());
         }
 
+
+
+    /*    String tableName = "comments";
+        String col1 = "username";
+        String col2 = "comment";
+        String col3 = "time";
+
+        // Create the specified table
+        boolean tableCreationResult = DatabaseManager.createTable(tableName, col1, col2, col3);
+*/
+
+
+
+
 //        BackupManager backupManager = new BackupManager(
 //                "ec2-54-246-1-94.eu-west-1.compute.amazonaws.com",
 //                "d6rkhhv2aujh36",
Index: src/main/java/Managers/DatabaseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Managers;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class DatabaseManager {\r\n\r\n    public static boolean createTable(String tableName, String col1, String col2) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                // Create a table with the specified name\r\n                String createTableQuery = String.format(\"CREATE TABLE IF NOT EXISTS %s (id SERIAL PRIMARY KEY, %s VARCHAR(255), %s VARCHAR(255))\", tableName, col1, col2);\r\n                executeQuery(conn, createTableQuery);\r\n\r\n                return true; // Table creation successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Table creation failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Table creation failed due to SQL exception\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public static boolean insertRecord(String tableName, String columns, String values) {\r\n        // Connect to the database\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n               // String colString = String.join(\", \", columns);\r\n               // String valString = String.join(\", \", values);\r\n\r\n                // Insert a record into the specified table\r\n                String insertQuery = String.format(\"INSERT INTO %s (%s) VALUES (%s)\", tableName, columns, values);\r\n                executeQuery(conn, insertQuery);\r\n\r\n                return true; // Insertion successful\r\n            } else {\r\n                System.out.println(\"Connection to the database failed\");\r\n                return false; // Insertion failed due to connection failure\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false; // Insertion failed due to SQL exception\r\n        }\r\n    }\r\n\r\n    //Deleting records\r\n    public static boolean deleteRecord(String tableName, int id) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                //Delete record from the table\r\n                String delQuery = String.format(\"DELETE FROM %s WHERE id = \" + id, tableName);\r\n                executeQuery(conn, delQuery);\r\n                return true;\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n                return false;\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Read record from a table id\r\n    //selectedoutput is desired column\r\n    public static String readRecord(String tableName, String selectedOutput, String knownCol, String knownInput) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \\\"\" + selectedOutput + \"\\\" FROM \" + tableName + \" WHERE \\\"\" + knownCol + \"\\\" = '\" + knownInput + \"'\";\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static String readRecord2(String tableName, String selectedOutput, int knownID) {\r\n        String result = null;\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n\r\n                try {\r\n                    Statement s =conn.createStatement();\r\n                    //    SELECT \"username\" FROM papers3 WHERE username = 'testpaperUpload';\r\n\r\n                    String sql = \"SELECT \" + selectedOutput + \" FROM \" + tableName + \" WHERE id=\" + knownID;\r\n\r\n\r\n                    ResultSet rset=s.executeQuery(sql);\r\n                    while(rset.next()){\r\n                        result = rset.getString(selectedOutput);\r\n                    }\r\n                    rset.close();\r\n                    s.close();\r\n                    conn.close();\r\n                }\r\n                catch (Exception e){\r\n                }\r\n\r\n            }\r\n            else{\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static int getLargestId(String tableName) {\r\n        int largestId = 0;\r\n\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    String sql = \"SELECT MAX(id) FROM \" + tableName;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    if (rs.next()) {\r\n                        largestId = rs.getInt(1);\r\n                    }\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return largestId;\r\n    }\r\n\r\n    public static void getAllPaperNamesFromDB(String tableName, int noRows) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Fixed the SQL query string\r\n                    String sql = \"SELECT * FROM \" + tableName + \" LIMIT \" + noRows;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    while (rs.next()) {\r\n                        ResultSetMetaData rsmd = rs.getMetaData();\r\n                        //int columnsNumber = rsmd.getColumnCount();\r\n                        System.out.println(\"tesing get all papers from db\"+rs.getString(3));\r\n\r\n                        System.out.println();\r\n                    }\r\n                    rs.close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    //not sure if need\r\n    public static void getAllUSerNamesFromDB(String tableName, int noRows) {\r\n        try (Connection conn = DatabaseConnector.connectToDatabase()) {\r\n            if (conn != null) {\r\n                System.out.println(\"Connection to the database successful!\");\r\n\r\n                try (Statement stmt = conn.createStatement()) {\r\n                    // Fixed the SQL query string\r\n                    String sql = \"SELECT * FROM \" + tableName + \" LIMIT \" + noRows;\r\n                    ResultSet rs = stmt.executeQuery(sql);\r\n\r\n                    while (rs.next()) {\r\n                        ResultSetMetaData rsmd = rs.getMetaData();\r\n                        //int columnsNumber = rsmd.getColumnCount();\r\n                        System.out.println(\"tesing get all papers from db\"+rs.getString(2));\r\n\r\n                        System.out.println();\r\n                    }\r\n                    rs.close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                System.out.println(\"Connection to database failed\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private static void executeQuery (Connection conn, String query){\r\n            try (PreparedStatement statement = conn.prepareStatement(query)) {\r\n                statement.executeUpdate();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Managers/DatabaseManager.java b/src/main/java/Managers/DatabaseManager.java
--- a/src/main/java/Managers/DatabaseManager.java	(revision 955116430f7b5c9371d1690c1512c5f71c495d2b)
+++ b/src/main/java/Managers/DatabaseManager.java	(date 1704198974211)
@@ -6,14 +6,14 @@
 
 public class DatabaseManager {
 
-    public static boolean createTable(String tableName, String col1, String col2) {
+    public static boolean createTable(String tableName, String col1, String col2, String col3) {
         // Connect to the database
         try (Connection conn = DatabaseConnector.connectToDatabase()) {
             if (conn != null) {
                 System.out.println("Connection to the database successful!");
 
                 // Create a table with the specified name
-                String createTableQuery = String.format("CREATE TABLE IF NOT EXISTS %s (id SERIAL PRIMARY KEY, %s VARCHAR(255), %s VARCHAR(255))", tableName, col1, col2);
+                String createTableQuery = String.format("CREATE TABLE IF NOT EXISTS %s (id SERIAL PRIMARY KEY, %s VARCHAR(255), %s VARCHAR(255), %s VARCHAR(255))", tableName, col1, col2, col3);
                 executeQuery(conn, createTableQuery);
 
                 return true; // Table creation successful
Index: src/main/java/Managers/CreateLoginForm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Managers;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\n\r\nimport MainUI.*;\r\n\r\n\r\npublic class CreateLoginForm extends JFrame implements ActionListener\r\n{\r\n\r\n    JButton b1, skiplogin, createAcc;\r\n    JPanel newPanel, newPanel2, newPanel3,  backPanel, loginPanel, newPanel22, errorPanel;\r\n    JLabel userLabel, passLabel, passReq,loginLabel, userReq, errorLabel;\r\n    final JTextField  textField1, textField2;\r\n    String userName;\r\n    String tableName;\r\n\r\n\r\n    public CreateLoginForm()\r\n    {\r\n        backPanel = new JPanel(new GridLayout(5,1));\r\n        backPanel.setSize(1000,1000);\r\n\r\n        loginPanel = new JPanel();\r\n        loginPanel.setLayout(new BoxLayout(loginPanel, BoxLayout.Y_AXIS));\r\n\r\n\r\n        loginLabel = new JLabel(\"Login or Create New Account\");\r\n        passLabel = new JLabel(\"Password must contain at least one number, one symbol (!@#$%^&*) and be more than 6 characters\");\r\n\r\n        loginLabel.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        passLabel.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        loginPanel.add(loginLabel);\r\n        loginPanel.add(passLabel);\r\n\r\n        backPanel.add(loginPanel);\r\n        add(backPanel);\r\n\r\n\r\n        userLabel = new JLabel();\r\n        userLabel.setText(\"Username\");\r\n\r\n\r\n        textField1 = new JTextField(15);\r\n\r\n\r\n        passLabel = new JLabel();\r\n        passLabel.setText(\"Password\");\r\n\r\n        textField2 = new JPasswordField(15);\r\n\r\n        b1 = new JButton(\"Login\");\r\n\r\n        skiplogin = new JButton(\"Skip login\");\r\n\r\n        createAcc = new JButton(\"Create Account\");\r\n\r\n        passReq = new JLabel(\"\");\r\n\r\n\r\n        userReq = new JLabel(\"\");\r\n\r\n\r\n        newPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        newPanel2 = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        newPanel22 = new JPanel();\r\n        newPanel22.setLayout(new BoxLayout(newPanel22, BoxLayout.Y_AXIS));\r\n        newPanel.setSize(200,200);\r\n        newPanel3 = new JPanel();\r\n        newPanel.add(userLabel);\r\n        newPanel.add(textField1);\r\n        newPanel2.add(passLabel);\r\n        newPanel2.add(textField2);\r\n\r\n        passReq.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        userReq.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        newPanel22.add(passReq);\r\n        newPanel22.add(userReq);\r\n\r\n\r\n        newPanel3.add(b1);\r\n        newPanel3.add(createAcc);\r\n        newPanel3.add(skiplogin);\r\n        backPanel.add(newPanel);\r\n        backPanel.add(newPanel2);\r\n        backPanel.add(newPanel22);\r\n\r\n        backPanel.add(newPanel3);\r\n       // backPanel.add(newPanel);\r\n\r\n        add(backPanel, BorderLayout.CENTER);\r\n\r\n        createAcc.addActionListener(this);\r\n\r\n        skiplogin.addActionListener(skiploginAL);\r\n        b1.addActionListener(currAcc);\r\n        setTitle(\"LOGIN FORM\");\r\n    }\r\n\r\n    private boolean isValidUsername(String user){\r\n        boolean isValidFormat = user.matches(\"^[A-Za-z0-9 ]+$\");\r\n\r\n        boolean isTaken = LoginManager.isUserTaken(user);\r\n\r\n        return isValidFormat && !isTaken;   //username contains just letters\r\n    }\r\n\r\n    private boolean isValidPassword(String pass){\r\n        return pass.matches(\"^(?=.*[0-9])(?=.*[!@#$%^&*]).{6,}$\");   //password has to contain one number, one symbol, at least 6 characters\r\n    }\r\n\r\n\r\n    public void actionPerformed(ActionEvent ae)\r\n    {\r\n        String userName = textField1.getText();        //get user entered username from the textField1\r\n        String passWord = textField2.getText();        //get user entered pasword from the textField2\r\n        if(!isValidUsername(userName) && isValidPassword(passWord)){\r\n            userReq.setText(\"Username taken, please enter an altenate username\");\r\n            passReq.setText(\"\");\r\n        }\r\n\r\n        if(!isValidPassword(passWord) && isValidUsername(userName)){\r\n            passReq.setText(\"Please enter a valid password\");\r\n            userReq.setText(\"\");\r\n        }\r\n\r\n        if(!isValidUsername(userName) && !isValidPassword(passWord)){\r\n            userReq.setText(\"Username taken, please enter an altenate username\");\r\n            passReq.setText(\"Please enter a valid password\");\r\n        }\r\n\r\n        if(isValidUsername(userName) && isValidPassword(passWord)){\r\n            this.userName = userName;\r\n            dispose();\r\n\r\n\r\n            tableName = \"users\";\r\n            boolean tableCreationResult = DatabaseManager.createTable(tableName, \"username\", \"password\");\r\n            if (tableCreationResult) {\r\n\r\n                boolean addUser = DatabaseManager.insertRecord(tableName, \"username, password\", String.format(\"'%s', '%s'\", userName, PasswordHashing.hashPassword(passWord)));\r\n                if (addUser) {\r\n\r\n                    System.out.println(\"Record inserted successfully!\");\r\n                } else {\r\n                    System.out.println(\"Failed to insert record.\");\r\n                }\r\n            }\r\n\r\n            MainUI page = new MainUI(this.userName);\r\n            String userName1 = page.getUserName();\r\n\r\n            //page.setVisible(true);\r\n            //JLabel wel_label = new JLabel(\"Welcome: \"+userName);\r\n            //page.add(wel_label);\r\n\r\n            //page.getContentPane().add(wel_label);\r\n        }\r\n        else{\r\n            //show error message\r\n            System.out.println(\"Please enter valid username and password\");\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    ActionListener currAcc = new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            String userName = textField1.getText();        //get user entered username from the textField1\r\n            String passWord = textField2.getText();\r\n\r\n\r\n            if(!LoginManager.isUserTaken(userName)){\r\n                userReq.setText(\"Username not found\");\r\n                passReq.setText(\"\");\r\n            }\r\n\r\n            if(!LoginManager.checkPassword(userName, passWord) && LoginManager.isUserTaken(userName)){\r\n                passReq.setText(\"Incorrect Password for user: \"+userName);\r\n                userReq.setText(\"\");\r\n            }\r\n\r\n            if(LoginManager.isUserTaken(userName) && LoginManager.checkPassword(userName, passWord)){\r\n\r\n                dispose();\r\n                MainUI page = new MainUI(userName);\r\n                String userName1 = page.getUserName();\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    ActionListener skiploginAL = new ActionListener(){\r\n        public void actionPerformed(ActionEvent e){\r\n            dispose();\r\n            MainUI page = new MainUI(\"Skipped login user\");\r\n\r\n//            page.setVisible(true);\r\n//            JLabel wel_label = new JLabel(\"Welcome: \"+userName);\r\n//            page.add(wel_label);\r\n//\r\n//            page.getContentPane().add(wel_label);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    public String getUserName(){\r\n        return this.userName;\r\n        }\r\n\r\n\r\n/*\r\n        //check whether the credentials are authentic or not  \r\n        if (userName.equals(\"test1@gmail.com\") && passWord.equals(\"test\")) {  //if authentic, navigate user to a new page\r\n\r\n            //create instance of the NewPage  \r\n            MainUI page = new MainUI();\r\n\r\n            //make page visible to the user  \r\n            page.setVisible(true);\r\n\r\n            //create a welcome label and set it to the new page  \r\n            JLabel wel_label = new JLabel(\"Welcome: \"+userName);\r\n            page.getContentPane().add(wel_label);\r\n        }\r\n        else{\r\n            //show error message  \r\n            System.out.println(\"Please enter valid username and password\");\r\n        }\r\n    }*/\r\n}  
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Managers/CreateLoginForm.java b/src/main/java/Managers/CreateLoginForm.java
--- a/src/main/java/Managers/CreateLoginForm.java	(revision 955116430f7b5c9371d1690c1512c5f71c495d2b)
+++ b/src/main/java/Managers/CreateLoginForm.java	(date 1704200103809)
@@ -138,7 +138,7 @@
 
 
             tableName = "users";
-            boolean tableCreationResult = DatabaseManager.createTable(tableName, "username", "password");
+            boolean tableCreationResult = DatabaseManager.createTable(tableName, "username", "password", null);
             if (tableCreationResult) {
 
                 boolean addUser = DatabaseManager.insertRecord(tableName, "username, password", String.format("'%s', '%s'", userName, PasswordHashing.hashPassword(passWord)));
@@ -148,6 +148,7 @@
                 } else {
                     System.out.println("Failed to insert record.");
                 }
+
             }
 
             MainUI page = new MainUI(this.userName);
Index: .idea/dataSources/3a357e81-7d57-4fa3-930b-5e8480b7aa2d/storage_v2/_src_/database/d6rkhhv2aujh36.HFmGjw/schema/public.abK9xQ.meta
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#n:public\r\n!<md> [7678927655, 0, null, null, -2147483648, -2147483648]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources/3a357e81-7d57-4fa3-930b-5e8480b7aa2d/storage_v2/_src_/database/d6rkhhv2aujh36.HFmGjw/schema/public.abK9xQ.meta b/.idea/dataSources/3a357e81-7d57-4fa3-930b-5e8480b7aa2d/storage_v2/_src_/database/d6rkhhv2aujh36.HFmGjw/schema/public.abK9xQ.meta
--- a/.idea/dataSources/3a357e81-7d57-4fa3-930b-5e8480b7aa2d/storage_v2/_src_/database/d6rkhhv2aujh36.HFmGjw/schema/public.abK9xQ.meta	(revision 955116430f7b5c9371d1690c1512c5f71c495d2b)
+++ b/.idea/dataSources/3a357e81-7d57-4fa3-930b-5e8480b7aa2d/storage_v2/_src_/database/d6rkhhv2aujh36.HFmGjw/schema/public.abK9xQ.meta	(date 1704199343658)
@@ -1,2 +1,2 @@
 #n:public
-!<md> [7678927655, 0, null, null, -2147483648, -2147483648]
+!<md> [7678953916, 0, null, null, -2147483648, -2147483648]
